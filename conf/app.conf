################################################################################
# Revel 配置文件
# 更多信息请访问 http://revel.github.io/manual/appconf.html
################################################################################

# Revel 构建部分
# 该部分包含不可重新加载的值
################################################################################

# 逗号分隔的文件夹列表，这些文件夹包含在包或构建命令中
# 如果你不想包含这些文件夹中的文件夹，请在文件夹前加上 . 使其隐藏
package.folders = conf, public, app/views




# Revel 可重新配置部分
#
################################################################################


# 设置 `revel.AppName` 以供应用程序中使用。
# 示例：
#   `if revel.AppName {...}`
app.name = ExamSystem
# 一个秘密字符串，用于加密签名 cookie 以防止
# （并检测）用户修改。
# 保持这个字符串的秘密，否则用户将能够将任意 cookie 值注入到你的应用程序中
app.secret = 5CqGYovj5aCLFui6L7wVOhuQTCRky05k6piIKfTktHyTaKJdjjLssHTFigxxyuF3

# Revel 在代理（如 nginx、haproxy 等）后面运行。
app.behind.proxy = false


# 监听的 IP 地址。
http.addr =

# 监听的端口。
http.port = 9000

# 是否使用 SSL。
http.ssl = false

# 如果使用 SSL，X509 证书文件的路径。
#http.sslcert =

# 如果使用 SSL，X509 证书密钥的路径。
#http.sslkey =


# 超时指定单个客户端请求的时间限制（以秒为单位）。
# 超时为零表示没有超时。
http.timeout.read = 90
http.timeout.write = 60


# 对于 Revel 设置的任何 cookie（Session、Flash、Error），这些属性将设置
# 字段：
# http://golang.org/pkg/net/http/#Cookie
#
# Revel 设置的每个 cookie 都以此字符串为前缀。
cookie.prefix = REVEL

# 安全 cookie 启用了安全属性，并且仅通过 HTTPS 使用，
# 确保从客户端到服务器传输时 cookie 始终加密。
# 这使得 cookie 不太可能通过窃听暴露于 cookie 盗窃。
#
# 默认为 false。如果启用了 'http.ssl'，则默认为 true。
# 仅当 Revel 处理 SSL 连接时，这应该为 true。如果你在 Revel 前面使用代理（Nginx、Apache 等），则应保持为 false。
cookie.secure = false

# 限制 cookie 访问到给定域。
#cookie.domain =

# 定义会话 cookie 何时过期。
# 值：
# "720h"
#   一个时间段（http://golang.org/pkg/time/#ParseDuration），之后 cookie 过期，会话无效。
# "session"
#   设置会话 cookie，当用户关闭浏览器时会话无效。
session.expires = 720h


# Revel 使用的日期格式。可能的格式由 Go `time` 包定义（http://golang.org/pkg/time/#Parse）
format.date     = 2006-01-02
format.datetime = 2006-01-02 15:04


# 确定模板渲染是否应使用分块编码。
# 分块编码可以通过在整个模板完全渲染之前发送数据来减少客户端的首字节时间。
results.chunked = false

# 使用 gzip 压缩你的 HTML 和 CSS 文件通常可以节省大约
# 五十到七十个百分点的文件大小。这意味着加载页面的时间更少，使用的带宽也更少。
# 要启用压缩，请将值设置为 true。
results.compressed = false



# 此应用程序的默认语言。
i18n.default_language = en

# 消息丢失时的默认格式。
# 原始消息显示在 %s 中
#i18n.unknown_format = "??? %s ???"


# 模块用于提供静态内容，如 CSS、JavaScript 和媒体文件
# 允许这样的路由：
#  `Static.ServeModule("modulename","public")`
module.static = github.com/revel/modules/static



################################################################################

# 部分：dev
# 运行 Revel 在开发模式时评估此部分。如下：
#   `revel run path/to/myapp`
[dev]

# 这设置了 `revel.DevMode` 以供应用程序中使用。
# 示例：
#   `if revel.DevMode {...}`
#   或在你的模板中
#   ``
# 值：
# "true"
#   将 `DevMode` 设置为 `true`。
# "false"
#   将 `DevMode` 设置为 `false`。
mode.dev = true


# 调用 RenderJSON/RenderXML 时漂亮打印 JSON/XML
# 值：
# "true"
#   启用漂亮打印。
# "false"
#   禁用漂亮打印。
results.pretty = true


# 监视你的应用程序文件的更改并自动重建
# 值：
# "true"
#   启用自动重建。
# "false"
#   禁用自动重建。
watch = true


# 定义何时重建新更改。
# 值：
# "normal"
#   在收到新请求并检测到更改时重建。
# "eager"
#   一旦检测到更改立即重建。
watch.mode = eager

# 监视整个 `$GOPATH` 的更改。
# 值：
# "true"
#   包括 `$GOPATH` 在监视路径中。
# "false"
#   排除 `$GOPATH` 在监视路径中。默认值。
#watch.gopath = true


# 模块用于在浏览器中运行代码测试
# 参见：
#   http://revel.github.io/manual/testing.html
module.testrunner = github.com/revel/modules/testrunner


# 记录各种 Revel 日志的位置
# 值：
# "off"
#   禁用日志输出。
# "stdout"
#   记录到操作系统的标准输出。
# "stderr"
#   记录到操作系统的标准错误输出。默认值。
# "relative/path/to/log"
#   记录到文件。
log.all.filter.module.app = stdout    # 将应用程序的所有日志记录到 stdout
log.error.nfilter.module.app = stderr # 将所有错误日志记录到 stderr
log.crit.output = stderr              # 将所有严重日志记录到 stderr

# Revel 请求访问日志
# 访问日志行格式：
# INFO  21:53:55 static server-engine.go:169: 请求统计                             ip=127.0.0.1 path=/public/vendors/datatables.net-buttons/js/buttons.html5.min.js method=GET start=2017/08/31 21:53:55 status=200 duration_seconds=0.0002583 section=requestlog
log.request.output = stdout



################################################################################
# 部分：prod
# 运行 Revel 在生产模式时评估此部分。如下：
#   `revel run path/to/myapp prod`
# 参见：
#  [dev] 部分的各种设置文档
[prod]

mode.dev = false

results.pretty = false

watch = false

module.testrunner =

log.warn.output  = log/%(app.name)s-warn.json    # 将所有警告消息记录到文件
log.error.output = log/%(app.name)s-error.json   # 将所有错误记录到文件
log.crit.output = log/%(app.name)s-critical.json # 将所有严重日志记录到文件

# Revel 请求访问日志（json 格式）
# 示例：
#   log.request.output = %(app.name)s-request.json
log.request.output = log/%(app.name)s-requests.json


[db] 
uri = mongodb://localhost:27017

[administrator]
id_card = 533467199012268897 # 超级管理员账号，部署系统的时候配置上去就可以直接使用，此账号可以创建别的管理员账号
password = 00002583 # 超级管理员账号密码